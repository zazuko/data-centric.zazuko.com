"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[204],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),d=o,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},1298:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={},i="Remove meta CSVW triples",s={unversionedId:"workflows/how-to/remove-meta-csvw-triples",id:"workflows/how-to/remove-meta-csvw-triples",title:"Remove meta CSVW triples",description:"The CSVW specification requires the output to produce certain meta-triples which annotate",source:"@site/docs/workflows/how-to/remove-meta-csvw-triples.md",sourceDirName:"workflows/how-to",slug:"/workflows/how-to/remove-meta-csvw-triples",permalink:"/docs/workflows/how-to/remove-meta-csvw-triples",draft:!1,editUrl:"https://github.com/zazuko/data-centric.zazuko.com/tree/main/docs/workflows/how-to/remove-meta-csvw-triples.md",tags:[],version:"current",frontMatter:{},sidebar:"workflowsSidebar",previous:{title:"Extend barnard59 CLI",permalink:"/docs/workflows/how-to/extend-banard59-cli"},next:{title:"Pipeline Concepts",permalink:"/docs/workflows/explanations/pipeline"}},l={},c=[],p={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"remove-meta-csvw-triples"},"Remove meta CSVW triples"),(0,o.kt)("p",null,"The CSVW specification requires the output to produce certain meta-triples which annotate\nthe resulting data with its origin in the source files (table + row number). "),(0,o.kt)("p",null,"This greatly increases the total output by adding 4 triples for every CSV row, and it's unnecessary\nin many scenarios."),(0,o.kt)("p",null,"To easily remove these triples, as of version ",(0,o.kt)("inlineCode",{parentName:"p"},"1.0.1")," the ",(0,o.kt)("inlineCode",{parentName:"p"},"barnard59-csvw")," package exports a simple\nfilter function which can be used with ",(0,o.kt)("inlineCode",{parentName:"p"},"barnard59-base/filter.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-turtle"},"@prefix code: <https://code.described.at/> .\n@prefix p: <https://pipeline.described.at/> .\n\n<transform> a p:Pipeline, p:ReadableObjectMode ;\n    p:steps\n        [\n            p:stepList\n                (\n                    _:readCsv\n                    _:parseCsv\n                    _:toDataset\n                    _:toObservation\n                    _:buildCubeShape\n                    _:flatten\n    # highlight-next-line\n                    _:removeCsvwTriples\n                    _:generateShapeTarget\n                ) ;\n        ] ;\n.\n\n_:removeCsvwTriples a p:Step ;\n    code:implementedBy\n        [\n            a code:EcmaScriptModule ;\n            code:link <node:barnard59-base/filter.js#default> ;\n        ] ;\n    code:arguments\n        (\n            [\n                a code:EcmaScriptModule ;\n                code:link <node:barnard59-csvw/filter.js#excludeCsvwTriples> ;\n            ]\n        ) ;\n.\n")))}m.isMDXComponent=!0}}]);