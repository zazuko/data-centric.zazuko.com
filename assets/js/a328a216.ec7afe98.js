"use strict";(self.webpackChunkdata_centric_zazuko_com=self.webpackChunkdata_centric_zazuko_com||[]).push([[824],{4213:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>p,contentTitle:()=>d,default:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>h});var t=i(5893),a=i(1151),r=i(9286),o=i(6150),l=i(2916);const s={},d="Extend barnard59 CLI",c={id:"workflows/how-to/extend-banard59-cli",title:"Extend barnard59 CLI",description:"To create additional CLI commands for the barnard59 CLI you will need to first create and publish",source:"@site/docs/workflows/how-to/extend-banard59-cli.mdx",sourceDirName:"workflows/how-to",slug:"/workflows/how-to/extend-banard59-cli",permalink:"/docs/workflows/how-to/extend-banard59-cli",draft:!1,unlisted:!1,editUrl:"https://github.com/zazuko/data-centric.zazuko.com/tree/main/docs/workflows/how-to/extend-banard59-cli.mdx",tags:[],version:"current",frontMatter:{},sidebar:"workflowsSidebar",previous:{title:"Automate pipelines",permalink:"/docs/workflows/how-to/automate-pipeline"},next:{title:"Fail pipeline gracefully",permalink:"/docs/workflows/how-to/fail-pipeline-gently"}},p={},h=[{value:"Create manifest entry",id:"create-manifest-entry",level:2},{value:"Selecting pipeline identifier",id:"selecting-pipeline-identifier",level:2},{value:"Mapping variables to CLI options",id:"mapping-variables-to-cli-options",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"extend-barnard59-cli",children:"Extend barnard59 CLI"}),"\n",(0,t.jsxs)(n.p,{children:["To create additional CLI commands for the ",(0,t.jsxs)(n.a,{href:"../reference/cli",children:[(0,t.jsx)(n.code,{children:"barnard59"})," CLI"]})," you will need to first create and publish\na package whose name starts with ",(0,t.jsx)(n.code,{children:"barnard59-"}),". If you have not, follow the ",(0,t.jsx)(n.a,{href:"../tutorial/first-pipeline",children:"tutorial"}),". The\nrest of this how-to will use that ",(0,t.jsx)(n.code,{children:"barnard59-time-zone"})," as the example."]}),"\n",(0,t.jsxs)(n.p,{children:["When you complete this how-to, you will be able to run a new ",(0,t.jsx)(n.code,{children:"barnard59 time-zone fetch"})," command."]}),"\n",(0,t.jsx)(n.h2,{id:"create-manifest-entry",children:"Create manifest entry"}),"\n",(0,t.jsxs)(n.p,{children:["If necessary, create and open a ",(0,t.jsx)(n.code,{children:"manifest.ttl"})," in the package root. In it, add the following triples:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-turtle",children:'@base <https://barnard59.zazuko.com/> .\n@prefix b59: <https://barnard59.zazuko.com/vocab#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n\n<command/time-zone/fetch>\n    a b59:CliCommand ;\n    b59:command "fetch" ;\n    rdfs:label "Gets current time in the specific time zone" ;\n    b59:source "barnard59-time-zone/pipeline/main.ttl" ;\n.\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"b59:CliCommand"})," type, and ",(0,t.jsx)(n.code,{children:"b59:command"})," and ",(0,t.jsx)(n.code,{children:"b59:source"})," properties are required."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"b59:source"})," must be a node identifier matching the package name and path."]}),"\n",(0,t.jsxs)(n.p,{children:["The identifier of the CLI Command resource is not that important, but it should be guaranteed to be unique and basing it in the ",(0,t.jsx)(n.code,{children:"https://barnard59.zazuko.com/command"})," is current best practice which may be used in the future for dereferencing manifest descriptions."]}),"\n",(0,t.jsx)(n.p,{children:"Label is optional."}),"\n",(0,t.jsx)(n.h2,{id:"selecting-pipeline-identifier",children:"Selecting pipeline identifier"}),"\n",(0,t.jsxs)(n.p,{children:["In case when the pipeline definition contains sub-pipelines, the manifest will need to also include the exact identifier,\nsimilarly how the ",(0,t.jsx)(n.code,{children:"--pipeline"})," ",(0,t.jsx)(n.a,{href:"../reference/cli#--pipeline",children:"CLI"})," flag is required."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-turtle",children:"@prefix b59: <https://barnard59.zazuko.com/vocab#> .\n\n<command/time-zone/fetch>\n// highlight-next-line\n    b59:pipeline <http://example.org/pipeline/tz> ;\n.\n"})}),"\n",(0,t.jsx)(n.h2,{id:"mapping-variables-to-cli-options",children:"Mapping variables to CLI options"}),"\n",(0,t.jsxs)(n.p,{children:["Root pipeline variables will be mapped to CLI options. All options are required unless they have ",(0,t.jsx)(n.code,{children:"p:required false"})," or\n",(0,t.jsx)(n.code,{children:"p:value"})]}),"\n",(0,t.jsxs)(n.p,{children:["The pipeline ",(0,t.jsx)(n.code,{children:"http://example.org/pipeline/tz"})," has one variable:"]}),"\n",(0,t.jsx)(r.Z,{language:"turtle",title:"pipeline/main.ttl",children:(0,o.I)(l.Z,{from:6,num:11})}),"\n",(0,t.jsx)(n.p,{children:"It will be mapped to an optional CLI option:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-shell",children:"barnard59 time-zone fetch --TZ Europe/Amsterdam\n"})})]})}function u(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(m,{...e})}):m(e)}},6150:(e,n,i)=>{function t(e,n){let{from:i=1,to:t=i,num:a}=void 0===n?{}:n;const r=e.split("\n",i-1).join("\n").length;let o;return o=a?e.split("\n",i+a).join("\n").length:e.split("\n",t).join("\n").length,e.substring(r,o).trim()}i.d(n,{I:()=>t})},2916:(e,n,i)=>{i.d(n,{Z:()=>t});const t='@base <http://example.org/pipeline/> .\n@prefix code: <https://code.described.at/> .\n@prefix p: <https://pipeline.described.at/> .\n@prefix op: <https://barnard59.zazuko.com/operations/> .\n\n<tz> a p:Pipeline, p:Readable ;\n  p:variables\n    [\n      p:variable\n        [\n          a p:Variable ;\n          p:name "TZ" ;\n          p:value "UTC" ;\n        ]\n    ] ;\n  p:steps\n    [\n      p:stepList (\n        <fetch>\n        [ op:base\\/json\\/parse () ]\n        <jsonldStructure>\n        [ op:formats\\/jsonld\\/parse\\/object () ]\n        [ op:formats\\/ntriples\\/serialize () ]\n      )\n    ] .\n\n<fetch> op:http\\/get\n  [\n    code:name "url" ;\n    code:value "https://timeapi.io/api/Time/current/zone?timeZone=${TZ}"^^code:EcmaScriptTemplateLiteral ;\n  ] .\n\n<jsonldStructure> op:base\\/map (\n  [\n    a code:EcmaScriptModule ;\n    code:link <file:../lib/jsonldStructure.js#addContext>\n  ]\n) .\n'}}]);