"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[226],{3905:(e,n,a)=>{a.d(n,{Zo:()=>c,kt:()=>f});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),s=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},c=function(e){var n=s(e.components);return t.createElement(p.Provider,{value:n},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(a),u=r,f=d["".concat(p,".").concat(u)]||d[u]||m[u]||l;return a?t.createElement(f,i(i({ref:n},c),{},{components:a})):t.createElement(f,i({ref:n},c))}));function f(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=u;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}u.displayName="MDXCreateElement"},9997:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var t=a(7462),r=(a(7294),a(3905));const l={},i="barnard59 CLI",o={unversionedId:"workflows/reference/cli/index",id:"workflows/reference/cli/index",title:"barnard59 CLI",description:"Main options",source:"@site/docs/workflows/reference/cli/index.md",sourceDirName:"workflows/reference/cli",slug:"/workflows/reference/cli/",permalink:"/docs/workflows/reference/cli/",draft:!1,editUrl:"https://github.com/zazuko/data-centric.zazuko.com/tree/main/docs/workflows/reference/cli/index.md",tags:[],version:"current",frontMatter:{},sidebar:"workflowsSidebar",previous:{title:"Writing valid pipelines",permalink:"/docs/workflows/explanations/pipeline-validity"},next:{title:"graph-store",permalink:"/docs/workflows/reference/cli/graph-store"}},p={},s=[{value:"Main options",id:"main-options",level:2},{value:"--variable",id:"--variable",level:3},{value:"--variable-all",id:"--variable-all",level:3},{value:"--verbose",id:"--verbose",level:3},{value:"run command",id:"run-command",level:2},{value:"filename",id:"filename",level:3},{value:"--pipeline",id:"--pipeline",level:3},{value:"Package-specific commands",id:"package-specific-commands",level:2}],c={toc:s},d="wrapper";function m(e){let{components:n,...a}=e;return(0,r.kt)(d,(0,t.Z)({},c,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"barnard59-cli"},"barnard59 CLI"),(0,r.kt)("h2",{id:"main-options"},"Main options"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'> barnard59 --help    \n\nUsage: barnard59 [options] [command]\n\nOptions:\n  --variable <name=value>                 variable key value pairs (default: {})\n  --variable-all                          Import all environment variables\n  -v, --verbose                           enable diagnostic console output\n  --enable-buffer-monitor                 enable histogram of buffer usage\n  --otel-debug <level>                    Enable OpenTelemetry console diagnostic output (choices: "NONE", "ERROR", "WARN", "INFO", "DEBUG", "VERBOSE", "ALL", default: "ERROR")\n  --otel-metrics-exporter <exporter>      OpenTelemetry Metrics exporter to use (choices: "otlp", "none", default: "none")\n  --otel-metrics-interval <milliseconds>  Export Metrics interval (default: 10000)\n  --otel-traces-exporter <exporter>       OpenTelemetry Traces exporter to use (choices: "otlp", "none", default: "none")\n  -h, --help                              display help for command\n\nCommands:\n  run [options] <filename>\n  help [command]                          display help for command\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The options ",(0,r.kt)("inlineCode",{parentName:"p"},"--variable"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"--variable-all")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"--verbose")," are also available on every sub-command")),(0,r.kt)("h3",{id:"--variable"},"--variable"),(0,r.kt)("p",null,"Sets the value of a single pipeline variable"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"barnard59 --variable foo=bar run pipeline.ttl\n")),(0,r.kt)("p",null,"The above will set the value ",(0,r.kt)("inlineCode",{parentName:"p"},"bar")," to pipeline variable ",(0,r.kt)("inlineCode",{parentName:"p"},"foo")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"TODO: Create a page about pipeline variables")),(0,r.kt)("h3",{id:"--variable-all"},"--variable-all"),(0,r.kt)("p",null,"Sometimes it's tedious to map multiple variables from the environment on by one. ",(0,r.kt)("inlineCode",{parentName:"p"},"--variable-all")," maps all environment\nvariables automatically."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"FOO=bar BAR=baz barnard59 --variable-all run pipeline.ttl\n")),(0,r.kt)("p",null,"The above will set the variables ",(0,r.kt)("inlineCode",{parentName:"p"},"FOO")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"BAR")," alongside any other environment variable from the current shell."),(0,r.kt)("h3",{id:"--verbose"},"--verbose"),(0,r.kt)("p",null,"Set once, increases the logging level to ",(0,r.kt)("inlineCode",{parentName:"p"},"WARN"),". Set twice or thrice, increases logging level further to ",(0,r.kt)("inlineCode",{parentName:"p"},"DEBUG")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"TRACE"),"\nrespectively."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"barnard59 -vv run pipeline.ttl\n")),(0,r.kt)("h2",{id:"run-command"},"run command"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'barnard59 run --help\n\nUsage: barnard59 run [options] <filename>\n\nOptions:\n  --output [filename]      output file (default: "-")\n  --pipeline [iri]         IRI of the pipeline description\n  --variable <name=value>  variable key value pairs (default: {})\n  --variable-all           Import all environment variables\n  -v, --verbose            enable diagnostic console output\n  -h, --help               display help for command\n')),(0,r.kt)("h3",{id:"filename"},"filename"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Required argument")),(0,r.kt)("p",null,"Path to the pipeline definition"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"barnard59 run pipeline/main.ttl\n")),(0,r.kt)("h3",{id:"--pipeline"},"--pipeline"),(0,r.kt)("p",null,"If the pipeline definition contains multiple pipelines or sub-pipelines, it is necessary to provide the URL of the root\npipeline to run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"barnard59 run pipeline/main.ttl --pipeline http://example.com/pipeline/main\n")),(0,r.kt)("h2",{id:"package-specific-commands"},"Package-specific commands"),(0,r.kt)("p",null,"When add to a project, certain ",(0,r.kt)("inlineCode",{parentName:"p"},"barnard59")," packages install additional commands which run canned pipelines those packages provide."),(0,r.kt)("p",null,"See the sub-pages for their details and ",(0,r.kt)("a",{parentName:"p",href:"../../how-to/extend-banard59-cli"},"How-To: Extend barnard59 CLI")," for instructions\non adding dynamic pipeline commands to your barnard59 package."))}m.isMDXComponent=!0}}]);