"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[350],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),f=r,u=d["".concat(p,".").concat(f)]||d[f]||m[f]||i;return n?a.createElement(u,o(o({ref:t},c),{},{components:n})):a.createElement(u,o({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7591:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={title:"Simplified Syntax",sidebar_position:3},o=void 0,l={unversionedId:"workflows/explanations/simplified-syntax",id:"workflows/explanations/simplified-syntax",title:"Simplified Syntax",description:"To avoid verbose step definitions, a simplified syntax allows to reduce boilerplate for common operations.",source:"@site/docs/workflows/explanations/simplified-syntax.md",sourceDirName:"workflows/explanations",slug:"/workflows/explanations/simplified-syntax",permalink:"/docs/workflows/explanations/simplified-syntax",draft:!1,editUrl:"https://github.com/zazuko/data-centric.zazuko.com/tree/main/docs/workflows/explanations/simplified-syntax.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Simplified Syntax",sidebar_position:3},sidebar:"workflowsSidebar",previous:{title:"Operations",permalink:"/docs/workflows/explanations/operations"},next:{title:"Writing valid pipelines",permalink:"/docs/workflows/explanations/pipeline-validity"}},p={},s=[],c={toc:s},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"To avoid verbose step definitions, a simplified syntax allows to reduce boilerplate for common operations."),(0,r.kt)("p",null,"Step definitions are based on the ",(0,r.kt)("a",{parentName:"p",href:"https://code.described.at/"},"code")," ontology and include details necessary to locate, load and call the implementation code.\nFor example, the following snippet (already described in greater detail in the ",(0,r.kt)("a",{parentName:"p",href:"pipeline#step"},"pipeline concepts")," page) allows to load and call a node library function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-turtle"},'<#readFile> a p:Step ;\n  code:implementedBy [ a code:EcmaScriptModule ;\n    code:link <node:fs#createReadStream>\n  ] ;\n  code:arguments ( "input.txt" ) .\n')),(0,r.kt)("p",null,"The above step definition would likely be used in the step list of a pipeline:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-turtle"},"<#pipeline> a p:Pipeline ;\n  p:steps [\n    p:stepList ( \n      <#readFile> \n      <#doSomethingElse> \n    )\n  ] .\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"barnard59-core")," package already defines the ",(0,r.kt)("inlineCode",{parentName:"p"},"createReadStream")," operation in its ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/zazuko/barnard59-core/blob/master/manifest.ttl"},"manifest"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-turtle"},'@base <http://barnard59.zazuko.com/operations/core/> .\n\n<fs/createReadStream> a p:Operation, p:Readable;\n  rdfs:label "Read file";\n  rdfs:comment "Reads a file from the local file system.";\n  code:implementedBy [ a code:EcmaScriptModule;\n    code:link <node:fs#createReadStream>\n  ].\n')),(0,r.kt)("p",null,"Hence, we can inline the call to such a well-known operation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-turtle"},'@base <http://barnard59.zazuko.com/operations/core/> .\n\n<#pipeline> a p:Pipeline ;\n  p:steps [\n    p:stepList ( \n      [ <fs/createReadStream> ( "input.txt" ) ]\n      <#doSomethingElse> \n    )\n  ] .\n')),(0,r.kt)("p",null,"Other examples of simplified syntax are in the ",(0,r.kt)("a",{parentName:"p",href:"../tutorial/first-pipeline"},"getting started")," tutorial."),(0,r.kt)("p",null,"Each barnard59 package listed in the ",(0,r.kt)("a",{parentName:"p",href:"./operations"},"operations")," page has a ",(0,r.kt)("inlineCode",{parentName:"p"},"manifest.ttl")," file with the available operations.\nFrequently used ones are in the manifests of ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/zazuko/barnard59-base/blob/master/manifest.ttl"},"barnard59-base")," and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/zazuko/barnard59-formats/blob/master/manifest.ttl"},"barnard59-formats"),"."),(0,r.kt)("p",null,"Once imported in a project, the barnard59 CLI will find the manifest in the ",(0,r.kt)("inlineCode",{parentName:"p"},"node_modules")," directory, enabling the use of simplified syntax for the operations found."))}m.isMDXComponent=!0}}]);