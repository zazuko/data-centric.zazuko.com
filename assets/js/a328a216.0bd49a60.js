"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[824],{6150:(e,n,t)=>{function a(e,n){let{from:t=1,to:a,num:i}=void 0===n?{}:n;const o=e.split("\n",t-1).join("\n").length+1;let r;return a?r=e.split("\n",a).join("\n").length:i&&(r=e.split("\n",t+i).join("\n").length),e.substring(o,r)}t.d(n,{I:()=>a})},8199:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>b,frontMatter:()=>p,metadata:()=>s,toc:()=>m});var a=t(7462),i=(t(7294),t(3905)),o=t(614),r=t(6150),l=t(2916);const p={},d="Extend barnard59 CLI",s={unversionedId:"workflows/how-to/extend-banard59-cli",id:"workflows/how-to/extend-banard59-cli",title:"Extend barnard59 CLI",description:"To create additional CLI commands for the barnard59 CLI you will need to first create and publish",source:"@site/docs/workflows/how-to/extend-banard59-cli.mdx",sourceDirName:"workflows/how-to",slug:"/workflows/how-to/extend-banard59-cli",permalink:"/docs/workflows/how-to/extend-banard59-cli",draft:!1,editUrl:"https://github.com/zazuko/data-centric.zazuko.com/tree/main/docs/workflows/how-to/extend-banard59-cli.mdx",tags:[],version:"current",frontMatter:{},sidebar:"workflowsSidebar",previous:{title:"Automate pipelines",permalink:"/docs/workflows/how-to/automate-pipeline"},next:{title:"Pipeline Concepts",permalink:"/docs/workflows/explanations/pipeline"}},c={},m=[{value:"Create manifest entry",id:"create-manifest-entry",level:2},{value:"Selecting pipeline identifier",id:"selecting-pipeline-identifier",level:2},{value:"Mapping variables to CLI options",id:"mapping-variables-to-cli-options",level:2}],u={toc:m},h="wrapper";function b(e){let{components:n,...t}=e;return(0,i.kt)(h,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"extend-barnard59-cli"},"Extend barnard59 CLI"),(0,i.kt)("p",null,"To create additional CLI commands for the ",(0,i.kt)("a",{parentName:"p",href:"../reference/cli"},(0,i.kt)("inlineCode",{parentName:"a"},"barnard59")," CLI")," you will need to first create and publish\na package whose name starts with ",(0,i.kt)("inlineCode",{parentName:"p"},"barnard59-"),". If you have not, follow the ",(0,i.kt)("a",{parentName:"p",href:"../tutorial/first-pipeline"},"tutorial"),". The\nrest of this how-to will use that ",(0,i.kt)("inlineCode",{parentName:"p"},"barnard59-time-zone")," as the example."),(0,i.kt)("p",null,"When you complete this how-to, you will be able to run a new ",(0,i.kt)("inlineCode",{parentName:"p"},"barnard59 time-zone fetch")," command."),(0,i.kt)("h2",{id:"create-manifest-entry"},"Create manifest entry"),(0,i.kt)("p",null,"If necessary, create and open a ",(0,i.kt)("inlineCode",{parentName:"p"},"manifest.ttl")," in the package root. In it, add the following triples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-turtle"},'@base <https://barnard59.zazuko.com/> .\n@prefix b59: <https://barnard59.zazuko.com/vocab#> .\n@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .\n\n<command/time-zone/fetch>\n    a b59:CliCommand ;\n    b59:command "fetch" ;\n    rdfs:label "Gets current time in the specific time zone" ;\n    b59:source "barnard59-time-zone/pipeline/main.ttl" ;\n.\n')),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"b59:CliCommand")," type, and ",(0,i.kt)("inlineCode",{parentName:"p"},"b59:command")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"b59:source")," properties are required."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"b59:source")," must be a node identifier matching the package name and path."),(0,i.kt)("p",null,"The identifier of the CLI Command resource is not that important, but it should be guaranteed to be unique and basing it in the ",(0,i.kt)("inlineCode",{parentName:"p"},"https://barnard59.zazuko.com/command")," is current best practice which may be used in the future for dereferencing manifest descriptions."),(0,i.kt)("p",null,"Label is optional."),(0,i.kt)("h2",{id:"selecting-pipeline-identifier"},"Selecting pipeline identifier"),(0,i.kt)("p",null,"In case when the pipeline definition contains sub-pipelines, the manifest will need to also include the exact identifier,\nsimilarly how the ",(0,i.kt)("inlineCode",{parentName:"p"},"--pipeline")," ",(0,i.kt)("a",{parentName:"p",href:"../reference/cli#--pipeline"},"CLI")," flag is required."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-turtle"},"@prefix b59: <https://barnard59.zazuko.com/vocab#> .\n\n<command/time-zone/fetch>\n// highlight-next-line\n    b59:pipeline <http://example.org/pipeline/tz> ;\n.\n")),(0,i.kt)("h2",{id:"mapping-variables-to-cli-options"},"Mapping variables to CLI options"),(0,i.kt)("p",null,"Root pipeline variables will be mapped to CLI options. All options are required unless they have ",(0,i.kt)("inlineCode",{parentName:"p"},"p:required false")," or\n",(0,i.kt)("inlineCode",{parentName:"p"},"p:value")),(0,i.kt)("p",null,"The pipeline ",(0,i.kt)("inlineCode",{parentName:"p"},"http://example.org/pipeline/tz")," has two variables:"),(0,i.kt)(o.Z,{language:"turtle",title:"pipeline/main.ttl",mdxType:"CodeBlock"},(0,r.I)(l.Z,{from:6,to:20})),(0,i.kt)("p",null,"The will be mapped to optional CLI options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"barnard59 time-zone fetch --apiBase http://example.com/time --TZ Europe/Amsterdam\n")))}b.isMDXComponent=!0},2916:(e,n,t)=>{t.d(n,{Z:()=>a});const a='@base <http://example.org/pipeline/> .\n@prefix code: <https://code.described.at/> .\n@prefix p: <https://pipeline.described.at/> .\n\n<tz> a p:Pipeline, p:Readable ;\n  p:variables\n    [\n      p:variable\n        [\n          a p:Variable ;\n          p:name "apiBase" ;\n          p:value "https://timeapi.io/api/Time/current/zone?timeZone=" ;\n        ] ;\n      p:variable\n        [\n          a p:Variable ;\n          p:name "TZ" ;\n          p:value "UTC" ;\n        ]\n    ] ;\n  p:steps\n    [\n      p:stepList ( <fetch> <parseJson> <jsonldStructure> <parse> <serialize> )\n    ] .\n\n<fetch> a p:Step ;\n  code:implementedBy\n    [\n      a code:EcmaScriptModule ;\n      code:link <node:barnard59-http#get> ;\n    ] ;\n  code:arguments\n    [\n      code:name "url" ;\n      code:value "https://timeapi.io/api/Time/current/zone?timeZone=${TZ}"^^code:EcmaScriptTemplateLiteral ;\n    ] .\n\n<parseJson> a p:Step ;\n  code:implementedBy\n    [\n      a code:EcmaScriptModule ;\n      code:link <node:barnard59-base/json.js#parse> ;\n    ] .\n\n<jsonldStructure>\n  a p:Step ;\n  code:implementedBy\n    [\n      a code:EcmaScriptModule ;\n    # highlight-next-line\n      code:link <node:barnard59-base/map.js#default> ;\n    ] ;\n  code:arguments\n    (\n      [\n        a code:EcmaScriptModule ;\n      # highlight-next-line\n        code:link <file:lib/jsonldStructure.js#addContext>\n      ]\n    ) .\n\n<parse> a p:Step ;\n  code:implementedBy\n    [\n      a code:EcmaScriptModule ;\n      code:link <node:barnard59-formats/jsonld.js#parse.object> ;\n    ] .\n\n<serialize>\n  a p:Step ;\n  code:implementedBy\n    [\n      a code:EcmaScriptModule ;\n      code:link <node:barnard59-formats/ntriples.js#serialize> ;\n    ] .\n'}}]);