"use strict";(self.webpackChunkdata_centric_zazuko_com=self.webpackChunkdata_centric_zazuko_com||[]).push([[247],{3639:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"workflows/explanations/simplified-syntax","title":"Simplified Syntax","description":"To avoid verbose step definitions, a simplified syntax allows to reduce boilerplate for common operations.","source":"@site/docs/workflows/explanations/simplified-syntax.md","sourceDirName":"workflows/explanations","slug":"/workflows/explanations/simplified-syntax","permalink":"/docs/workflows/explanations/simplified-syntax","draft":false,"unlisted":false,"editUrl":"https://github.com/zazuko/data-centric.zazuko.com/tree/main/docs/workflows/explanations/simplified-syntax.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Simplified Syntax","sidebar_position":3},"sidebar":"workflowsSidebar","previous":{"title":"Operations","permalink":"/docs/workflows/explanations/operations"},"next":{"title":"Writing valid pipelines","permalink":"/docs/workflows/explanations/pipeline-validity"}}');var i=t(4848),s=t(8453);const o={title:"Simplified Syntax",sidebar_position:3},r=void 0,l={},d=[];function p(e){const n={a:"a",code:"code",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"To avoid verbose step definitions, a simplified syntax allows to reduce boilerplate for common operations."}),"\n",(0,i.jsxs)(n.p,{children:["Step definitions are based on the ",(0,i.jsx)(n.a,{href:"https://code.described.at/",children:"code"})," ontology and include details necessary to locate, load and call the implementation code.\nFor example, the following snippet (already described in greater detail in the ",(0,i.jsx)(n.a,{href:"pipeline#step",children:"pipeline concepts"})," page) allows to load and call a node library function."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-turtle",children:'<#readFile> a p:Step ;\n  code:implementedBy [ a code:EcmaScriptModule ;\n    code:link <node:fs#createReadStream>\n  ] ;\n  code:arguments ( "input.txt" ) .\n'})}),"\n",(0,i.jsx)(n.p,{children:"The above step definition would likely be used in the step list of a pipeline:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-turtle",children:"<#pipeline> a p:Pipeline ;\n  p:steps [\n    p:stepList ( \n      <#readFile> \n      <#doSomethingElse> \n    )\n  ] .\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"barnard59-core"})," package already defines the ",(0,i.jsx)(n.code,{children:"createReadStream"})," operation in its ",(0,i.jsx)(n.a,{href:"https://github.com/zazuko/barnard59-core/blob/master/manifest.ttl",children:"manifest"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-turtle",children:'@base <http://barnard59.zazuko.com/operations/core/> .\n\n<fs/createReadStream> a p:Operation, p:Readable;\n  rdfs:label "Read file";\n  rdfs:comment "Reads a file from the local file system.";\n  code:implementedBy [ a code:EcmaScriptModule;\n    code:link <node:fs#createReadStream>\n  ].\n'})}),"\n",(0,i.jsx)(n.p,{children:"Hence, we can inline the call to such a well-known operation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-turtle",children:'@prefix fs: <http://barnard59.zazuko.com/operations/core/fs/> .\n\n<#pipeline> a p:Pipeline ;\n  p:steps [\n    p:stepList ( \n      [ fs:createReadStream ( "input.txt" ) ]\n      <#doSomethingElse> \n    )\n  ] .\n'})}),"\n",(0,i.jsxs)(n.p,{children:["As you can see, an step declared in simplified syntax is a node with a single predicate which is the operation's identifier.\nArguments are passed as usual. As a list, if the operation uses positional parameters, or key/value pairs, if the operation has named parameters.\nSee ",(0,i.jsx)(n.a,{href:"/docs/workflows/explanations/pipeline",children:"this page"})," for more details."]}),"\n",(0,i.jsxs)(n.p,{children:["Other examples of simplified syntax are in the ",(0,i.jsx)(n.a,{href:"../tutorial/first-pipeline",children:"getting started"})," tutorial."]}),"\n",(0,i.jsxs)(n.p,{children:["Each barnard59 package listed in the ",(0,i.jsx)(n.a,{href:"./operations",children:"operations"})," page has a ",(0,i.jsx)(n.code,{children:"manifest.ttl"})," file with the available operations.\nFrequently used ones are in the manifests of ",(0,i.jsx)(n.a,{href:"https://github.com/zazuko/barnard59-base/blob/master/manifest.ttl",children:"barnard59-base"})," and ",(0,i.jsx)(n.a,{href:"https://github.com/zazuko/barnard59-formats/blob/master/manifest.ttl",children:"barnard59-formats"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Once imported in a project, the barnard59 CLI will find the manifest in the ",(0,i.jsx)(n.code,{children:"node_modules"})," directory, enabling the use of simplified syntax for the operations found."]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var a=t(6540);const i={},s=a.createContext(i);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);