"use strict";(self.webpackChunkdata_centric_zazuko_com=self.webpackChunkdata_centric_zazuko_com||[]).push([[5428],{4264:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>r,contentTitle:()=>d,default:()=>c,frontMatter:()=>i,metadata:()=>a,toc:()=>l});const a=JSON.parse('{"id":"apis/kopflos/how-to/load-api","title":"Load API description","description":"A Kopflos API is composed of triples that describe the API\'s structure and behavior. These triples need to be loaded into the API\'s store before the API can be used.","source":"@site/docs/apis/kopflos/how-to/load-api.md","sourceDirName":"apis/kopflos/how-to","slug":"/apis/kopflos/how-to/load-api","permalink":"/docs/apis/kopflos/how-to/load-api","draft":false,"unlisted":false,"editUrl":"https://github.com/zazuko/data-centric.zazuko.com/tree/main/docs/apis/kopflos/how-to/load-api.md","tags":[],"version":"current","frontMatter":{},"sidebar":"apisSidebar","previous":{"title":"Serve RDF in data-bound HTML","permalink":"/docs/apis/kopflos/how-to/html-templates"},"next":{"title":"Implement parametrised handlers","permalink":"/docs/apis/kopflos/how-to/parametrised-handlers"}}');var s=t(4848),n=t(8453);const i={},d="Load API description",r={},l=[{value:"Load from named graphs",id:"load-from-named-graphs",level:2},{value:"Initialise with preloaded data",id:"initialise-with-preloaded-data",level:2}];function p(e){const o={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.header,{children:(0,s.jsx)(o.h1,{id:"load-api-description",children:"Load API description"})}),"\n",(0,s.jsx)(o.p,{children:"A Kopflos API is composed of triples that describe the API's structure and behavior. These triples need to be loaded into the API's store before the API can be used."}),"\n",(0,s.jsx)(o.h2,{id:"load-from-named-graphs",children:"Load from named graphs"}),"\n",(0,s.jsx)(o.p,{children:"The simplest and recommended way to load the API is to use named graphs. A single API can be loaded from multiple named graphs, and there can be multiple APIs served from a single Kopflos instance. Use the code below to load the API from named graphs:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-js",children:"import Kopflos from '@kopflos-cms/core'\n\nlet config\nconst api = new Kopflos(config)\nawait Kopflos.fromGraphs(api, 'http://example.com/api1', 'http://example.com/api2', 'http://example.com/shared')\n"})}),"\n",(0,s.jsx)(o.admonition,{type:"tip",children:(0,s.jsxs)(o.p,{children:[(0,s.jsx)(o.a,{href:"https://rdf.js.org/data-model-spec/#namednode-interface",children:"RDF/JS NamedNode"})," objects can be used as well."]})}),"\n",(0,s.jsx)(o.p,{children:"The given named graphs will be loaded from the default SPARQL endpoint."}),"\n",(0,s.jsx)(o.h2,{id:"initialise-with-preloaded-data",children:"Initialise with preloaded data"}),"\n",(0,s.jsx)(o.p,{children:"If you have the API triples in memory, you can initialise the API with it directly:"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-typescript",children:"import Kopflos from '@kopflos-cms/core'\n\nlet config\nlet dataset: DatasetCore\n\nconst api = new Kopflos(config, { dataset })\n"})})]})}function c(e={}){const{wrapper:o}={...(0,n.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,o,t)=>{t.d(o,{R:()=>i,x:()=>d});var a=t(6540);const s={},n=a.createContext(s);function i(e){const o=a.useContext(n);return a.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function d(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),a.createElement(n.Provider,{value:o},e.children)}}}]);