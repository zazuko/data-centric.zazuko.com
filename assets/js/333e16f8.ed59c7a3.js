"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[716],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>h});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function p(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),s=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},c=function(e){var r=s(e.components);return n.createElement(i.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=s(t),m=o,h=d["".concat(i,".").concat(m)]||d[m]||u[m]||a;return t?n.createElement(h,l(l({ref:r},c),{},{components:t})):n.createElement(h,l({ref:r},c))}));function h(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=m;var p={};for(var i in r)hasOwnProperty.call(r,i)&&(p[i]=r[i]);p.originalType=e,p[d]="string"==typeof e?e:o,l[1]=p;for(var s=2;s<a;s++)l[s]=t[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},840:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>p,toc:()=>s});var n=t(7462),o=(t(7294),t(3905));const a={title:"graph-store"},l="barnard59 graph-store",p={unversionedId:"workflows/reference/cli/graph-store",id:"workflows/reference/cli/graph-store",title:"graph-store",description:"Commands",source:"@site/docs/workflows/reference/cli/graph-store.md",sourceDirName:"workflows/reference/cli",slug:"/workflows/reference/cli/graph-store",permalink:"/docs/workflows/reference/cli/graph-store",draft:!1,editUrl:"https://github.com/zazuko/data-centric.zazuko.com/tree/main/docs/workflows/reference/cli/graph-store.md",tags:[],version:"current",frontMatter:{title:"graph-store"},sidebar:"workflowsSidebar",previous:{title:"barnard59 CLI",permalink:"/docs/workflows/reference/cli/"},next:{title:"Loaders",permalink:"/docs/workflows/reference/loaders"}},i={},s=[{value:"Commands",id:"commands",level:2},{value:"put command",id:"put-command",level:2},{value:"--source",id:"--source",level:3},{value:"--endpoint",id:"--endpoint",level:3},{value:"--graph",id:"--graph",level:3}],c={toc:s},d="wrapper";function u(e){let{components:r,...t}=e;return(0,o.kt)(d,(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"barnard59-graph-store"},(0,o.kt)("inlineCode",{parentName:"h1"},"barnard59 graph-store")),(0,o.kt)("h2",{id:"commands"},"Commands"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"barnard59 graph-store --help             \n\nUsage: barnard59 graph-store [options] [command]\n\nOptions:\n  -V, --version   output the version number\n  -h, --help      display help for command\n\nCommands:\n  put [options]   Upload RDF documents using SPARQL Graph Store Protocol\n  help [command]  display help for command\n")),(0,o.kt)("h2",{id:"put-command"},"put command"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"barnard59.js graph-store put --help\n\nUsage: barnard59 graph-store put [options]\n\nUpload RDF documents using SPARQL Graph Store Protocol\n\nOptions:\n  --source <source>        Glob of RDF documents to upload\n  --graph <graph>\n  --endpoint <endpoint>\n  --user <user>\n  --password <password>\n  --variable <name=value>  variable key value pairs (default: {})\n  --variable-all           Import all environment variables\n  -v, --verbose            enable diagnostic console output\n  -h, --help               display help for command\n")),(0,o.kt)("h3",{id:"--source"},"--source"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Required option")),(0,o.kt)("p",null,"When setting the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"--source")," make sure to wrap it in quotation to prevent the shell from expanding the globbed path."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'barnard59 graph-store put --source "data/*.ttl"\n')),(0,o.kt)("h3",{id:"--endpoint"},"--endpoint"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Required option")),(0,o.kt)("h3",{id:"--graph"},"--graph"),(0,o.kt)("p",null,"The URL of the target graph. If not given, the graph will be taken directly from the data stream."),(0,o.kt)("p",null,"When uploading RDF graph documents (n3, turtle, n-triples), the default graph will be used."),(0,o.kt)("p",null,"When uploading RDF dataset documents, the graphs will be used exactly as they are in the data."))}u.isMDXComponent=!0}}]);